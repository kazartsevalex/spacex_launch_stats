{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["launchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","missionKey","LAUNCHES_QUERY","gql","Launches","Fragment","MissionKey","query","loading","error","data","console","log","launches","map","LaunchItem","key","React","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","style","width","display","margin","alt","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2be458b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst launchItem = ({ launch: { flight_number, mission_name, launch_date_local, launch_success} }) => {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Mission: <span className={classNames({\n            'text-success': launch_success,\n            'text-danger': !launch_success\n          })}>{ mission_name }</span></h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default launchItem;\n","import React from 'react';\n\nconst missionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n};\n\nexport default missionKey;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <h4>Loading...</h4>;\n              if (error) console.log(error);\n\n              return (\n                <React.Fragment>\n                  {\n                    data.launches.map(launch => (\n                      <LaunchItem key={launch.flight_number} launch={launch} />\n                    ))\n                  }\n                </React.Fragment>\n              );\n            }\n          }\n        </Query>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n      launch_year\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends React.Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <React.Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <h4>Loading...</h4>;\n              if (error) console.log(error);\n\n              const { mission_name, flight_number, launch_year, launch_success, launch_date_local, rocket: {\n                rocket_id, rocket_name, rocket_type } } = data.launch;\n\n              return (\n                <div>\n                  <h1 className=\"display-4 my-3\">Mission: <span className=\"text-dark\">{ mission_name }</span></h1>\n                  <h4 className=\"mb-3\">Launch Details</h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Flight Number: { flight_number }</li>\n                    <li className=\"list-group-item\">Launch Year: { launch_year }</li>\n                    <li className=\"list-group-item\">Launch Successful: <span className={classNames({\n                      'text-success': launch_success,\n                      'text-danger': !launch_success\n                    })}>{ launch_success ? 'Yes' : 'No' }</span></li>\n                  </ul>\n                  <h4 className=\"my-3\">Rocket Details</h4>\n                  <ul className=\"list-group\">\n                    <li className=\"list-group-item\">Rocket ID: { rocket_id }</li>\n                    <li className=\"list-group-item\">Rocket Name: { rocket_name }</li>\n                    <li className=\"list-group-item\">Rocket Type: { rocket_type }</li>\n                  </ul>\n                  <hr />\n                  <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                </div>\n              );\n            }\n          }\n        </Query>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src=\"https://www.spacex.com/sites/spacex/files/spacex_logo_white.png\"\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n            alt=\"Home\"\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}